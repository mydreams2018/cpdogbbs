注意：此功能适用于 react-scripts@1.0.0 及更高版本。

.env：默认值。
.env.local：本地覆盖。此文件将针对除测试之外的所有环境加载。
.env.development、、：特定于环境的设置。.env.test.env.production
.env.development.local、 、 ： 特定于环境的设置的本地覆盖。.env.test.local.env.production.local
左侧的文件比右侧的文件具有更高的优先级：

npm start: , , , .env.development.local .env.local .env.development .env
npm run build: , , , .env.production.local .env.local .env.production .env
npm test： ， ， （缺少注释） .env.test.local .env.test .env .env.local

  // ⚠️ createRows() 每次渲染都会被调用
  const [rows, setRows] = useState(createRows(props.count));
    // ✅ createRows() 只会被调用一次
    const [rows, setRows] = useState(() => createRows(props.count));

    有类似 forceUpdate 的东西吗？
    如果前后两次的值相同，useState 和 useReducer Hook 都会放弃更新。原地修改 state 并调用 setState 不会引起重新渲染。
    通常，你不应该在 React 中修改本地 state。然而，作为一条出路，你可以用一个增长的计数器来在 state 没变的时候依然强制一次重新渲染：
     const [ignored, forceUpdate] = useReducer(x => x + 1, 0);
      function handleClick() {
        forceUpdate();
      }

      function Example({ someProp }) {
        function doSomething() {
          console.log(someProp);
        }
        useEffect(() => {
          doSomething();
        }, []); // 🔴 这样不安全（它调用的 `doSomething` 函数使用了 `someProp`）
      }

      function Example({ someProp }) {
        useEffect(() => {
          function doSomething() {
            console.log(someProp);
          }
          doSomething();
        }, [someProp]); // ✅ 安全（我们的 effect 仅用到了 `someProp`）
      }

      ------------>>>>>
      function Counter() {
        const [count, setCount] = useState(0);

        useEffect(() => {
          const id = setInterval(() => {
            setCount(count + 1); // 这个 effect 依赖于 `count` state
          }, 1000);
          return () => clearInterval(id);
        }, []); // 🔴 Bug: `count` 没有被指定为依赖

        return <h1>{count}</h1>;
      }

      传入空的依赖数组 []，意味着该 hook 只在组件挂载时运行一次，并非重新渲染时。但如此会有问题，
      在 setInterval 的回调中，count 的值不会发生变化。因为当 effect 执行时，我们会创建一个闭包，
      并将 count 的值被保存在该闭包当中，且初值为 0。每隔一秒，回调就会执行 setCount(0 + 1)，
      因此，count 永远不会超过 1。
      指定 [count] 作为依赖列表就能修复这个 Bug，但会导致每次改变发生时定时器都被重置。事实上，
      每个 setInterval 在被清除前（类似于 setTimeout）都会调用一次。但这并不是我们想要的。
      要解决这个问题，我们可以使用 setState 的函数式更新形式。它允许我们指定 state 该
      如何 改变而不用引用 当前 state：
      function Counter() {
        const [count, setCount] = useState(0);

        useEffect(() => {
          const id = setInterval(() => {
            setCount(c => c + 1); // ✅ react 会传入最新的`count`
          }, 1000);
          return () => clearInterval(id);
        }, []); // ✅ 我们的 effect 不使用组件作用域中的任何变量

        return <h1>{count}</h1>;
      }
      （setCount 函数的身份是被确保稳定的，所以可以放心的省略掉）
      此时，setInterval 的回调依旧每秒调用一次，但每次 setCount 内部的回调取到的 count 是最新值（在回调中变量命名为 c）。